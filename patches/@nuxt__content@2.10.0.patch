diff --git a/dist/module.d.mts b/dist/module.d.mts
index ff00aec4b60c950785ddb925525480534dec0525..be9f1bd8d5ce7bc6c2476b78b0473f317984a412 100644
--- a/dist/module.d.mts
+++ b/dist/module.d.mts
@@ -1,7 +1,7 @@
 import * as _nuxt_schema from '@nuxt/schema';
 import { ListenOptions } from 'listhen';
 import { Options } from 'minisearch';
-import { Theme, Lang } from 'shiki-es';
+import { BuiltinTheme, BuiltinLanguage, LanguageRegistration, ThemeRegistrationAny } from 'shiki';
 
 interface ParsedContentInternalMeta {
     /**
@@ -438,14 +438,30 @@ interface ModuleOptions {
         /**
          * Default theme that will be used for highlighting code blocks.
          */
-        theme?: Theme | {
-            default: Theme;
-            [theme: string]: Theme;
+        theme?: BuiltinTheme | {
+            default: BuiltinTheme;
+            [theme: string]: BuiltinTheme;
         };
         /**
          * Preloaded languages that will be available for highlighting code blocks.
+         *
+         * @deprecated Use `langs` instead
+         */
+        preload?: (BuiltinLanguage | LanguageRegistration)[];
+        /**
+         * Languages to be bundled loaded by Shiki
+         *
+         * All languages used has to be included in this list at build time, to create granular bundles.
+         *
+         * Unlike the `preload` option, when this option is provided, it will override the default languages.
+         *
+         * @default ['js','ts','vue','css','html','vue','shell']
+         */
+        langs?: (BuiltinLanguage | LanguageRegistration)[];
+        /**
+         * Additional themes to be bundled loaded by Shiki
          */
-        preload?: Lang[];
+        themes?: (BuiltinTheme | ThemeRegistrationAny)[];
     };
     /**
      * Options for yaml parser.
@@ -549,7 +565,7 @@ interface ModuleOptions {
              *
              * @default true
              */
-            indexed: boolean;
+            indexed?: boolean;
             /**
              * MiniSearch Options. When using `indexed` option,
              * this options will be used to configure MiniSearch
@@ -572,7 +588,7 @@ interface ModuleOptions {
              *
              * @see https://lucaong.github.io/minisearch/modules/_minisearch_.html#options
              */
-            options: Options;
+            options?: Options;
         };
     };
 }
diff --git a/dist/module.d.ts b/dist/module.d.ts
index ff00aec4b60c950785ddb925525480534dec0525..be9f1bd8d5ce7bc6c2476b78b0473f317984a412 100644
--- a/dist/module.d.ts
+++ b/dist/module.d.ts
@@ -1,7 +1,7 @@
 import * as _nuxt_schema from '@nuxt/schema';
 import { ListenOptions } from 'listhen';
 import { Options } from 'minisearch';
-import { Theme, Lang } from 'shiki-es';
+import { BuiltinTheme, BuiltinLanguage, LanguageRegistration, ThemeRegistrationAny } from 'shiki';
 
 interface ParsedContentInternalMeta {
     /**
@@ -438,14 +438,30 @@ interface ModuleOptions {
         /**
          * Default theme that will be used for highlighting code blocks.
          */
-        theme?: Theme | {
-            default: Theme;
-            [theme: string]: Theme;
+        theme?: BuiltinTheme | {
+            default: BuiltinTheme;
+            [theme: string]: BuiltinTheme;
         };
         /**
          * Preloaded languages that will be available for highlighting code blocks.
+         *
+         * @deprecated Use `langs` instead
+         */
+        preload?: (BuiltinLanguage | LanguageRegistration)[];
+        /**
+         * Languages to be bundled loaded by Shiki
+         *
+         * All languages used has to be included in this list at build time, to create granular bundles.
+         *
+         * Unlike the `preload` option, when this option is provided, it will override the default languages.
+         *
+         * @default ['js','ts','vue','css','html','vue','shell']
+         */
+        langs?: (BuiltinLanguage | LanguageRegistration)[];
+        /**
+         * Additional themes to be bundled loaded by Shiki
          */
-        preload?: Lang[];
+        themes?: (BuiltinTheme | ThemeRegistrationAny)[];
     };
     /**
      * Options for yaml parser.
@@ -549,7 +565,7 @@ interface ModuleOptions {
              *
              * @default true
              */
-            indexed: boolean;
+            indexed?: boolean;
             /**
              * MiniSearch Options. When using `indexed` option,
              * this options will be used to configure MiniSearch
@@ -572,7 +588,7 @@ interface ModuleOptions {
              *
              * @see https://lucaong.github.io/minisearch/modules/_minisearch_.html#options
              */
-            options: Options;
+            options?: Options;
         };
     };
 }
diff --git a/dist/module.json b/dist/module.json
index 58a6d9a6cc5648044d94588a725644492026e983..da63cf3ea69b1ad70cad6e9dd50385828038ef20 100644
--- a/dist/module.json
+++ b/dist/module.json
@@ -1,6 +1,6 @@
 {
   "name": "@nuxt/content",
-  "version": "2.10.0",
+  "version": "2.11.0",
   "configKey": "content",
   "compatibility": {
     "nuxt": "^3.0.0-rc.3"
diff --git a/dist/module.mjs b/dist/module.mjs
index c6019716a8313fecaf7a7ccc1b4da6cf19658d72..37b15552baebe4c1f36ad2bb6d1a29e118c9e961 100644
--- a/dist/module.mjs
+++ b/dist/module.mjs
@@ -14,7 +14,7 @@ import { WebSocketServer } from 'ws';
 import { consola } from 'consola';
 
 const name = "@nuxt/content";
-const version = "2.10.0";
+const version = "2.11.0";
 
 function makeIgnored(ignores) {
   const rxAll = ["/\\.", "/-", ...ignores.filter((p) => p)].map((p) => new RegExp(p));
@@ -228,7 +228,7 @@ const module = defineNuxtModule({
         enforce: "pre",
         transform(code) {
           if (code.includes("ContentSlot")) {
-            code = code.replace(/<ContentSlot (.*)(:use=['"](\$slots.)?([a-zA-Z0-9_-]*)['"]|use=['"]([a-zA-Z0-9_-]*)['"])/g, '<MDCSlot $1 name="$4"');
+            code = code.replace(/<ContentSlot(\s)+([^/>]*)(:use=['"](\$slots.)?([a-zA-Z0-9_-]*)['"])/g, '<MDCSlot$1$2name="$5"');
             code = code.replace(/<\/ContentSlot>/g, "</MDCSlot>");
             code = code.replace(/<ContentSlot/g, "<MDCSlot");
             code = code.replace(/(['"])ContentSlot['"]/g, "$1MDCSlot$1");
@@ -389,7 +389,7 @@ const module = defineNuxtModule({
     addTemplate({
       filename: "content-components.mjs",
       getContents({ options: options2 }) {
-        const components = options2.getComponents(options2.mode).filter((c) => !c.island).flatMap((c) => {
+        const components = options2.getComponents().filter((c) => !c.island).flatMap((c) => {
           const exp = c.export === "default" ? "c.default || c" : `c['${c.export}']`;
           const isClient = c.mode === "client";
           const definitions = [];
@@ -588,7 +588,8 @@ const module = defineNuxtModule({
         tailwindConfig.content.files = tailwindConfig.content.files ?? [];
         tailwindConfig.content.files.push(contentPath);
       }
-      let cssPath = nuxt.options.tailwindcss?.cssPath ? await resolvePath(nuxt.options.tailwindcss?.cssPath, { extensions: [".css", ".sass", ".scss", ".less", ".styl"] }) : join(nuxt.options.dir.assets, "css/tailwind.css");
+      const [tailwindCssPath] = Array.isArray(nuxt.options.tailwindcss?.cssPath) ? nuxt.options.tailwindcss?.cssPath : [nuxt.options.tailwindcss?.cssPath];
+      let cssPath = tailwindCssPath ? await resolvePath(tailwindCssPath, { extensions: [".css", ".sass", ".scss", ".less", ".styl"] }) : join(nuxt.options.dir.assets, "css/tailwind.css");
       if (!fs.existsSync(cssPath)) {
         cssPath = await resolvePath("tailwindcss/tailwind.css");
       }
diff --git a/dist/runtime/components/ContentRenderer.vue.d.ts b/dist/runtime/components/ContentRenderer.vue.d.ts
index fa23038bf98252ca96b9bcc56fa3f16106d5796d..03edf6ee6705f6a95b05f056e32f6ecc96fbce4e 100644
--- a/dist/runtime/components/ContentRenderer.vue.d.ts
+++ b/dist/runtime/components/ContentRenderer.vue.d.ts
@@ -23,7 +23,7 @@ declare const _default: import("vue").DefineComponent<{
         type: StringConstructor;
         default: string;
     };
-}, void, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
+}, void, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
     /**
      * The document to render.
      */
diff --git a/dist/runtime/components/ContentSlot.vue.d.ts b/dist/runtime/components/ContentSlot.vue.d.ts
index b62dff5e04afc109ff90957b1e741b6a7f0da459..71b9dad5cfdad7759b4fde11bcb1e9661bc26a3a 100644
--- a/dist/runtime/components/ContentSlot.vue.d.ts
+++ b/dist/runtime/components/ContentSlot.vue.d.ts
@@ -14,7 +14,7 @@ declare const _default: import("vue").DefineComponent<{
         type: (StringConstructor | BooleanConstructor)[];
         default: boolean;
     };
-}, unknown, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
+}, unknown, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
     /**
      * A slot name or function
      */
diff --git a/dist/runtime/components/DocumentDrivenEmpty.vue.d.ts b/dist/runtime/components/DocumentDrivenEmpty.vue.d.ts
index 09e0f3cbd1219991a7d0f96f2211e108433a759f..5e6ffbb3c764b13916b27ad4e0f77d50ba0299c5 100644
--- a/dist/runtime/components/DocumentDrivenEmpty.vue.d.ts
+++ b/dist/runtime/components/DocumentDrivenEmpty.vue.d.ts
@@ -8,7 +8,7 @@ declare const _default: import("vue").DefineComponent<{
         type: PropType<ParsedContent>;
         required: true;
     };
-}, unknown, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
+}, unknown, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
     value: {
         type: PropType<ParsedContent>;
         required: true;
diff --git a/dist/runtime/components/DocumentDrivenNotFound.vue.d.ts b/dist/runtime/components/DocumentDrivenNotFound.vue.d.ts
index 2d27350ee1bb0e90d2f8b0450fbfdb2b83e49ed2..1a969b1fea5dcb8bf2e1ffacfccd63f0403d81fa 100644
--- a/dist/runtime/components/DocumentDrivenNotFound.vue.d.ts
+++ b/dist/runtime/components/DocumentDrivenNotFound.vue.d.ts
@@ -1,5 +1,5 @@
 /**
  * Used in `src/runtime/pages/document-driven.vue`
  */
-declare const _default: import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}, {}>;
+declare const _default: import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}, {}>;
 export default _default;
diff --git a/dist/runtime/composables/search.d.ts b/dist/runtime/composables/search.d.ts
index 1ae0c03ba28a4ead4b48c8ae2ab4af3302685c19..4f2ca2c059f26ffb0d2de456276a295a6666592d 100644
--- a/dist/runtime/composables/search.d.ts
+++ b/dist/runtime/composables/search.d.ts
@@ -1,6 +1,6 @@
 import { type Options as MiniSearchOptions } from 'minisearch';
 import { type MaybeRefOrGetter } from '#imports';
 export declare const defineMiniSearchOptions: <DataItem>(options: MiniSearchOptions<DataItem>) => any;
-export declare const searchContent: <DataItem>(search: MaybeRefOrGetter<string>, options: {
+export declare const searchContent: <DataItem>(search: MaybeRefOrGetter<string>, options?: {
     miniSearch?: any;
 }) => Promise<any>;
diff --git a/dist/runtime/composables/search.js b/dist/runtime/composables/search.js
index aa3984b41227357a3a24d98c886e9858460cd440..f61f75a73fda845bd0557ca034d4466882da94fd 100644
--- a/dist/runtime/composables/search.js
+++ b/dist/runtime/composables/search.js
@@ -3,7 +3,7 @@ import { useRuntimeConfig, useFetch, ref, computed, toValue } from "#imports";
 export const defineMiniSearchOptions = (options) => {
   return ref(options);
 };
-export const searchContent = async (search, options) => {
+export const searchContent = async (search, options = {}) => {
   const runtimeConfig = useRuntimeConfig();
   const { content } = runtimeConfig.public;
   const { integrity, api: { baseURL: baseAPI }, search: searchOptions } = content;
diff --git a/dist/runtime/composables/useUnwrap.d.ts b/dist/runtime/composables/useUnwrap.d.ts
index f1911eb2659967755232f8822d2360d06db2bc9a..8d0da2762f2e2232ad89370ba8d172c3134dfb7d 100644
--- a/dist/runtime/composables/useUnwrap.d.ts
+++ b/dist/runtime/composables/useUnwrap.d.ts
@@ -1,5 +1,4 @@
-import { unwrap, flatUnwrap } from '@nuxtjs/mdc/dist/runtime/utils/node';
 export declare const useUnwrap: () => {
-    unwrap: typeof unwrap;
-    flatUnwrap: typeof flatUnwrap;
+    unwrap: any;
+    flatUnwrap: any;
 };
diff --git a/dist/runtime/query/match/pipeline-legacy.js b/dist/runtime/query/match/pipeline-legacy.js
index 61ca068ed9b8d452a9f335ad1416712507ac3a5e..03aa71bf2d2424c37a77c889efe2cfbad44e786f 100644
--- a/dist/runtime/query/match/pipeline-legacy.js
+++ b/dist/runtime/query/match/pipeline-legacy.js
@@ -2,6 +2,9 @@ import { createPipelineFetcher } from "./pipeline.js";
 export function createPipelineFetcherLegacy(getContentsList) {
   const _pipelineFetcher = createPipelineFetcher(getContentsList);
   return async (query) => {
+    if (query.params().first) {
+      query.withDirConfig();
+    }
     const params = query.params();
     const result = await _pipelineFetcher(query);
     if (params.surround) {
diff --git a/dist/runtime/server/api/navigation.d.ts b/dist/runtime/server/api/navigation.d.ts
index 5298df7f0f673c97fe02c77b016ac9998ade2291..a7e1a784b2209dcf8d9b55d83b909014e06b691e 100644
--- a/dist/runtime/server/api/navigation.d.ts
+++ b/dist/runtime/server/api/navigation.d.ts
@@ -1,2 +1,2 @@
-declare const _default: any;
+declare const _default: import("h3").EventHandler<import("h3").EventHandlerRequest, Promise<string | number | true | object>>;
 export default _default;
diff --git a/dist/runtime/server/api/navigation.js b/dist/runtime/server/api/navigation.js
index 1b2f1d3be34bf5968a3e0b2f19e0356d29f9a3de..d827c12d8cee3dedebb2c092877ab0580d1ce6a7 100644
--- a/dist/runtime/server/api/navigation.js
+++ b/dist/runtime/server/api/navigation.js
@@ -1,9 +1,9 @@
+import { defineEventHandler } from "h3";
 import { cacheStorage, serverQueryContent } from "../storage.js";
 import { createNav } from "../navigation.js";
 import { getContentQuery } from "../../utils/query.js";
 import { isPreview } from "../preview.js";
-import { cachedEventHandler } from "#imports";
-export default cachedEventHandler(async (event) => {
+export default defineEventHandler(async (event) => {
   const query = getContentQuery(event);
   if (!isPreview(event) && Object.keys(query).length === 0) {
     const cache = await cacheStorage.getItem("content-navigation.json");
@@ -38,7 +38,4 @@ export default cachedEventHandler(async (event) => {
     return configs2;
   }, {});
   return createNav(contents?.result || contents, configs);
-}, {
-  maxAge: 31536e3,
-  shouldBypassCache: () => !!import.meta.dev
 });
diff --git a/dist/runtime/server/api/query.d.ts b/dist/runtime/server/api/query.d.ts
index 5298df7f0f673c97fe02c77b016ac9998ade2291..420a4b068dcd266760c0895ca5b11071eb8b67d5 100644
--- a/dist/runtime/server/api/query.d.ts
+++ b/dist/runtime/server/api/query.d.ts
@@ -1,2 +1,2 @@
-declare const _default: any;
+declare const _default: import("h3").EventHandler<import("h3").EventHandlerRequest, Promise<import("../../types/api").ContentQueryCountResponse | import("../../types/api").ContentQueryFindResponse<import("../../types").ParsedContent> | import("../../types/api").ContentQueryFindOneResponse<import("../../types").ParsedContent>>>;
 export default _default;
diff --git a/dist/runtime/server/api/query.js b/dist/runtime/server/api/query.js
index 9dd8715413e1c218008f57929f07619ddb1cc68d..3e77cf3452320ab931533c650889552a9229ac81 100644
--- a/dist/runtime/server/api/query.js
+++ b/dist/runtime/server/api/query.js
@@ -1,8 +1,8 @@
-import { createError } from "h3";
+import { createError, defineEventHandler } from "h3";
 import { serverQueryContent } from "../storage.js";
 import { getContentQuery } from "../../utils/query.js";
-import { useRuntimeConfig, cachedEventHandler } from "#imports";
-export default cachedEventHandler(async (event) => {
+import { useRuntimeConfig } from "#imports";
+export default defineEventHandler(async (event) => {
   const query = getContentQuery(event);
   const { advanceQuery } = useRuntimeConfig().public.content.experimental;
   if (query.first) {
@@ -29,7 +29,4 @@ export default cachedEventHandler(async (event) => {
     return serverQueryContent(event, query).count();
   }
   return serverQueryContent(event, query).find();
-}, {
-  maxAge: 31536e3,
-  shouldBypassCache: () => !!import.meta.dev
 });
diff --git a/dist/runtime/server/navigation.js b/dist/runtime/server/navigation.js
index 24ac97b77f269f324066832bd39d46bd9c3c71f4..9321e805f26488092d6279845d425ebbe15a6f70 100644
--- a/dist/runtime/server/navigation.js
+++ b/dist/runtime/server/navigation.js
@@ -66,6 +66,9 @@ export function createNav(contents, configs) {
 }
 const collator = new Intl.Collator(void 0, { numeric: true, sensitivity: "base" });
 function sortAndClear(nav) {
+  nav.forEach((item) => {
+    item._file = item._file.split(".").slice(0, -1).join(".");
+  });
   const sorted = nav.sort((a, b) => collator.compare(a._file, b._file));
   for (const item of sorted) {
     if (item.children?.length) {
diff --git a/dist/runtime/server/storage.d.ts b/dist/runtime/server/storage.d.ts
index 9b6de1879d44f2764cbc3fbe17fba6e9b41e82fc..f2fdba161a43cb58777858dd9a206f4642e3a3cd 100644
--- a/dist/runtime/server/storage.d.ts
+++ b/dist/runtime/server/storage.d.ts
@@ -21,7 +21,7 @@ export declare const cacheStorage: Storage;
 export declare const cacheParsedStorage: Storage;
 export declare const getContentsIds: (event: H3Event, prefix?: string) => Promise<string[]>;
 export declare function chunksFromArray<T>(arr: T[], n: number): Generator<T[], void>;
-export declare const getContentsList: (event: H3Event, prefix?: string) => Promise<ParsedContent[]>;
+export declare const getContentsList: (event: H3Event, prefix?: string) => any;
 export declare const getContent: (event: H3Event, id: string) => Promise<ParsedContent>;
 /**
  * Parse content file using registered plugins
diff --git a/dist/runtime/server/storage.js b/dist/runtime/server/storage.js
index bf51731125f6c05cb687071d573fe5d9d47ce779..4364d28365189d92d9a00fe7c977fbf4229f0268 100644
--- a/dist/runtime/server/storage.js
+++ b/dist/runtime/server/storage.js
@@ -14,6 +14,7 @@ export const sourceStorage = prefixStorage(useStorage(), "content:source");
 export const cacheStorage = prefixStorage(useStorage(), "cache:content");
 export const cacheParsedStorage = prefixStorage(useStorage(), "cache:content:parsed");
 const isProduction = process.env.NODE_ENV === "production";
+const isPrerendering = import.meta.prerender;
 const contentConfig = useRuntimeConfig().content;
 const isIgnored = makeIgnored(contentConfig.ignores);
 const invalidKeyCharacters = `'"?#/`.split("");
@@ -61,16 +62,39 @@ export function* chunksFromArray(arr, n) {
     yield arr.slice(i, i + n);
   }
 }
-export const getContentsList = async (event, prefix) => {
-  const keys = await getContentsIds(event, prefix);
-  const keyChunks = [...chunksFromArray(keys, 10)];
-  const contents = [];
-  for (const chunk of keyChunks) {
-    const result = await Promise.all(chunk.map((key) => getContent(event, key)));
-    contents.push(...result);
-  }
-  return contents;
-};
+export const getContentsList = /* @__PURE__ */ (() => {
+  let cachedContents = [];
+  let pendingContentsListPromise = null;
+  const _getContentsList = async (event, prefix) => {
+    const keys = await getContentsIds(event, prefix);
+    const keyChunks = [...chunksFromArray(keys, 10)];
+    const contents = [];
+    for (const chunk of keyChunks) {
+      const result = await Promise.all(chunk.map((key) => getContent(event, key)));
+      contents.push(...result);
+    }
+    return contents;
+  };
+  return (event, prefix) => {
+    if (event.context.__contentList) {
+      return event.context.__contentList;
+    }
+    if (isPrerendering && cachedContents.length) {
+      return cachedContents;
+    }
+    if (!pendingContentsListPromise) {
+      pendingContentsListPromise = _getContentsList(event, prefix);
+      pendingContentsListPromise.then((result) => {
+        if (isPrerendering) {
+          cachedContents = result;
+        }
+        event.context.__contentList = result;
+        pendingContentsListPromise = null;
+      });
+    }
+    return pendingContentsListPromise;
+  };
+})();
 const pendingPromises = {};
 export const getContent = async (event, id) => {
   const contentId = id;
diff --git a/dist/runtime/transformers/markdown.js b/dist/runtime/transformers/markdown.js
index 908442f09eccf252610dd99b369e8415a27f5d77..63d00393b9874e530523793b6ea96737540f616d 100644
--- a/dist/runtime/transformers/markdown.js
+++ b/dist/runtime/transformers/markdown.js
@@ -10,8 +10,13 @@ export default defineTransformer({
     const config = { ...options };
     config.rehypePlugins = await importPlugins(config.rehypePlugins);
     config.remarkPlugins = await importPlugins(config.remarkPlugins);
+    const highlightOptions = options.highlight ? {
+      ...options.highlight,
+      // Pass only when it's an function. String values are handled by `@nuxtjs/mdc`
+      highlighter: typeof options.highlight?.highlighter === "function" ? options.highlight.highlighter : void 0
+    } : void 0;
     const parsed = await parseMarkdown(content, {
-      highlight: options.highlight,
+      highlight: highlightOptions,
       remark: {
         plugins: config.remarkPlugins
       },
diff --git a/dist/types.d.mts b/dist/types.d.mts
index 7b35445114077bc9d9717a826402a7acfe69e170..40e87002c4cf90ea26d1fc1f5db13751042d188c 100644
--- a/dist/types.d.mts
+++ b/dist/types.d.mts
@@ -1,5 +1,5 @@
 
-import type { ModuleOptions, ModuleHooks } from './module'
+import type { ModuleOptions, ModuleHooks } from './module.js'
 
 
 declare module '@nuxt/schema' {
@@ -15,4 +15,4 @@ declare module 'nuxt/schema' {
 }
 
 
-export type { ModuleHooks, ModuleOptions, MountOptions, default } from './module'
+export type { ModuleHooks, ModuleOptions, MountOptions, default } from './module.js'
diff --git a/dist/web-types.json b/dist/web-types.json
index 4e3a29af8a28358affeefa7a9b0603fdd8c1c521..e165db4a0e59ce1f071b6d597130cea2ef2e78f6 100644
--- a/dist/web-types.json
+++ b/dist/web-types.json
@@ -1,7 +1,7 @@
 {
   "framework": "vue",
   "name": "@nuxt/content",
-  "version": "2.10.0",
+  "version": "2.11.0",
   "contributions": {
     "html": {
       "description-markup": "markdown",
diff --git a/package.json b/package.json
index 4f2de2e9dd534874133e51bfb50539536463ce24..465f77e989e4735fa63f38058abe5a21ce5abe56 100644
--- a/package.json
+++ b/package.json
@@ -46,58 +46,58 @@
     "test:unit": "nuxi prepare test/fixtures/basic && nuxi prepare test/fixtures/document-driven && vitest run"
   },
   "dependencies": {
-    "@vueuse/core": "^10.7.0",
-    "@vueuse/nuxt": "^10.7.0",
-    "@nuxt/kit": "^3.8.2",
-    "@nuxtjs/mdc": "^0.3.0",
+    "@nuxt/kit": "^3.10.0",
+    "@nuxtjs/mdc": "^0.4.0",
+    "@vueuse/core": "^10.7.2",
     "@vueuse/head": "^2.0.0",
+    "@vueuse/nuxt": "^10.7.2",
     "consola": "^3.2.3",
-    "defu": "^6.1.3",
+    "defu": "^6.1.4",
     "destr": "^2.0.2",
     "json5": "^2.2.3",
     "knitwork": "^1.0.0",
-    "listhen": "^1.5.5",
+    "listhen": "^1.6.0",
     "mdast-util-to-string": "^4.0.0",
     "mdurl": "^2.0.0",
-    "minisearch": "^6.3.0",
-    "micromark": "^4.0.0",
     "micromark-util-sanitize-uri": "^2.0.0",
     "micromark-util-types": "^2.0.0",
+    "micromark": "^4.0.0",
+    "minisearch": "^6.3.0",
     "ohash": "^1.1.3",
-    "pathe": "^1.1.1",
-    "scule": "^1.1.1",
-    "shiki-es": "^0.14.0",
+    "pathe": "^1.1.2",
+    "scule": "^1.2.0",
+    "shiki": "^1.0.0-beta.5",
     "slugify": "^1.6.6",
-    "socket.io-client": "^4.7.2",
+    "socket.io-client": "^4.7.4",
     "ufo": "^1.3.2",
     "unist-util-stringify-position": "^4.0.0",
     "unstorage": "^1.10.1",
-    "ws": "^8.15.1"
+    "ws": "^8.16.0"
   },
   "devDependencies": {
-    "@nuxt/module-builder": "^0.5.4",
-    "@nuxt/schema": "3.8.2",
-    "@nuxt/test-utils": "3.9.0",
-    "@nuxthq/studio": "^1.0.6",
+    "@nuxt/module-builder": "^0.5.5",
+    "@nuxt/schema": "3.10.0",
+    "@nuxt/test-utils": "3.11.0",
+    "@nuxthq/studio": "^1.0.10",
     "@nuxtjs/eslint-config-typescript": "latest",
-    "@nuxtjs/tailwindcss": "^6.10.1",
+    "@nuxtjs/tailwindcss": "^6.11.2",
     "@types/ws": "^8.5.10",
-    "c8": "^8.0.1",
+    "c8": "^9.1.0",
     "csvtojson": "^2.0.10",
     "eslint": "^8.56.0",
     "globby": "^14.0.0",
-    "husky": "^8.0.3",
+    "husky": "^9.0.10",
     "jiti": "^1.21.0",
-    "lint-staged": "^15.2.0",
-    "nuxt": "3.8.2",
+    "lint-staged": "^15.2.1",
+    "nuxt": "3.10.0",
     "rehype-figure": "^1.0.1",
     "rehype-wrap-all": "^1.1.0",
-    "release-it": "^17.0.1",
+    "release-it": "^17.0.3",
     "remark-oembed": "^1.2.2",
-    "vitest": "^1.1.0",
+    "vitest": "^1.2.2",
     "vue-docgen-web-types": "^0.1.8"
   },
-  "packageManager": "pnpm@8.12.1",
+  "packageManager": "pnpm@8.15.1",
   "pnpm": {
     "peerDependencyRules": {
       "allowedVersions": {
@@ -120,10 +120,5 @@
     "hooks": {
       "after:bump": "npx changelogen@latest --no-commit --no-tag --output --r $(node -p \"require('./package.json').version\")"
     }
-  },
-  "build": {
-    "externals": [
-      "#build/types/layouts"
-    ]
   }
 }
